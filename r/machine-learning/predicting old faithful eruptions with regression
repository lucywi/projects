# Predicting Old Faithful Eruptions with Regression

Load caret library, Old Faithful dataset, and set the seed.  
```{r}
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
```

Plot eruption duration vs. waiting time.
```{r}
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab= "Duration")
```

Fit a linear model.
```{r}
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
```
Look at the "Estimate", which is -1.79274 and the "waiting" time, which is 0.07390. The eruption prediction equation is: 

Predicted eruption = -1.79274 + 0.07390(waiting time)



Model fit. 
```{r}
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab= "Duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
```

Predict a new value using the predicted eruption equation. 
```{r}
coef(lm1)[1] + coef(lm1)[2] * 80
```
The predicted eruption time based on a waiting time of 80 is 4.119. 


Training and test plot predictions
```{r}
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab= "Duration")
lines(trainFaith$waiting, predict(lm1), lwd=3)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab= "Duration")
lines(testFaith$waiting, predict(lm1, newdata=testFaith), lwd=3)
```

Get training set/ test set errors
```{r}
# Calculate RSME on training
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))

# Calculate RSME on test
sqrt(sum((predict(lm1, newdata=testFaith)-testFaith$eruptions)^2))
```

Prediction intervals
```{r}
pred1 <- predict(lm1, newdata=testFaith, interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue")
matlines(testFaith$waiting[ord], pred1[ord, ], type="l",,col=c(1,2,2), lty=c(1,1,1), lwd=3)
```

Could also use the caret package
```{r}
modFit <- train(eruptions ~ waiting, data=trainFaith, method="lm")
summary(modFit$finalModel)
```
